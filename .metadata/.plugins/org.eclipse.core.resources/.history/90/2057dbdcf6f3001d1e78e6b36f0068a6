package com.giovannagrangeiro.projetocp;


import static org.hamcrest.CoreMatchers.is;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.jsonPath;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDate;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.giovannagrangeiro.projetocp.domain.Pessoa;
import com.giovannagrangeiro.projetocp.repositories.PessoaRepository;
import com.giovannagrangeiro.projetocp.resource.PessoaResource;
import com.giovannagrangeiro.projetocp.services.PessoaService;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@AutoConfigureMockMvc
public class PessoaTeste {
	
		
	@Mock
	private PessoaService pessoaService;
	
	@MockBean
	private PessoaRepository pessoaRepo;	
	
	@Autowired
	private MockMvc mockMvc;
	

	@Test
	public void testeBuscarPessoaPorId() throws Exception{
		Pessoa pessoa = new Pessoa();
		pessoa.setId(1);
		pessoa.setNome("João");
		pessoa.setCpf("10584310994");
		pessoa.setDataDeNascimento(LocalDate.of(2001, 11, 2));
		when(pessoaRepo.findById(1)).thenReturn(Optional.of(pessoa));
		
		mockMvc.perform(get("/pessoas/1")).andExpect(status().isOk()).andExpect((ResultMatcher) content()
				.contentType(MediaType.APPLICATION_JSON)).andExpect((ResultMatcher) jsonPath("$.id", is(1)))
				.andExpect((ResultMatcher) jsonPath("$.nome", is("João")));
	
		
	}
	
	@Test
	public void testeBuscarPessoas() throws Exception { 
		mockMvc.perform(get("/pessoas")).andExpect(status().isOk());
		
	}
	
	
	@Test
	public void criarPessoa() throws Exception{
		Pessoa pessoa = new Pessoa();
		pessoa.setId(1);
		pessoa.setNome("João");
		pessoa.setCpf("10584310994");
		pessoa.setDataDeNascimento(LocalDate.of(2001, 11, 2));
		when(pessoaService.salvarPessoa(pessoa).thenReturn(pessoa));
		
		mockMvc.perform(post("/pessoas").contentType(MediaType.APPLICATION_JSON))
				.content(objectMapper.writeValueAsString(pessoa)))
				.andExpect(status().isOk());
		
		
		
	
	}
	
	@Test
	public void testeEditarPessoa() throws Exception {
		Pessoa pessoa = new Pessoa();
		pessoa.setId(1);
		pessoa.setNome("João");
		pessoa.setCpf("10584310994");
		pessoa.setDataDeNascimento(LocalDate.of(2001, 11, 2));
		when(pessoaService.editarPessoa(eq(1), any())).thenReturn(pessoa);
		

		MvcResult resultado = mockMvc.perform(MockMvcRequestBuilders.put("/pessoas/1")
				.contentType(MediaType.APPLICATION_JSON).content("{\"nome\":\"João\",\"cpf\":\"10584310994\",\"dataDeNascimento\":\"2001-11-02\"}"))
				.andReturn();
		
	    assertEquals(200, resultado.getResponse().getStatus());
	    assertEquals("{\"id\":1,\"nome\":\"João\",\"cpf\":\"10584310994\",\"dataDeNascimento\":\"2001-11-02\",\"contatos\":[]}"
	    		, resultado.getResponse().getContentAsString());
		
		
		
	}
	
	@Test
	public void testeApagarPessoa() throws Exception {
		doNothing().when(pessoaService).apagarPessoa(1);
		
		mockMvc.perform(delete("/pessoas/1")).andExpect(status().isNoContent());
		
	
		
		
	}
	
	

}
