package com.giovannagrangeiro.projetocp.resource.exception;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.context.support.DefaultMessageSourceResolvable;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@Component
public class ResourceExceptionHandler extends ResponseEntityExceptionHandler {
	
	 @ExceptionHandler(NotFoundException.class)
	    public ResponseEntity<Object> handleNotFoundException(NotFoundException ex) {
	        ErrorResponse errorResponse = new ErrorResponse(HttpStatus.NOT_FOUND, ex.getMessage());
	        return buildResponseEntity(errorResponse);
	    }

	    @ExceptionHandler(MethodArgumentNotValidException.class)
	    public ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex) {
	        BindingResult bindingResult = ex.getBindingResult();
	        List<String> erro = bindingResult.getFieldErrors().stream()
	                .map(DefaultMessageSourceResolvable::getDefaultMessage)
	                .collect(Collectors.toList());
	        ErrorResponse errorResponse = new ErrorResponse(HttpStatus.BAD_REQUEST, "Validation error", erro);
	        return buildResponseEntity(errorResponse);
	    }

	    private ResponseEntity<Object> buildResponseEntity(ErrorResponse errorResponse) {
	        return new ResponseEntity<>(errorResponse, errorResponse.getStatus());
	    }
	}
	
	
